// Code generated by mockery v2.22.1. DO NOT EDIT.

package mock

import (
	"context"
	"github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: ctx, fields
func (_m *Logger) Debug(ctx context.Context, fields map[string]interface{}) {
	_m.Called(ctx, fields)
}

// Error provides a mock function with given fields: ctx, err, fields
func (_m *Logger) Error(ctx context.Context, err error, fields map[string]interface{}) {
	_m.Called(ctx, err, fields)
}

// Info provides a mock function with given fields: ctx, msg, fields
func (_m *Logger) Info(ctx context.Context, msg string, fields map[string]interface{}) {
	_m.Called(ctx, msg, fields)
}

// Warn provides a mock function with given fields: ctx, fields
func (_m *Logger) Warn(ctx context.Context, fields map[string]interface{}) {
	_m.Called(ctx, fields)
}

type mockConstructorTestingTNewLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogger(t mockConstructorTestingTNewLogger) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
