// Code generated by mockery v2.22.1. DO NOT EDIT.

package mock

import (
	load_properties "github.com/skolldire/web-simplify/pkg/utilities/read_properties"
	"github.com/skolldire/web-simplify/pkg/utilities/read_properties/viper"
	"github.com/stretchr/testify/mock"
)

// LoadProperties is an autogenerated mock type for the LoadProperties type
type LoadProperties struct {
	mock.Mock
}

// Apply provides a mock function with given fields:
func (_m *LoadProperties) Apply() (load_properties.Config, error) {
	ret := _m.Called()

	var r0 load_properties.Config
	var r1 error
	if rf, ok := ret.Get(0).(func() (load_properties.Config, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() load_properties.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(load_properties.Config)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLoadProperties interface {
	mock.TestingT
	Cleanup(func())
}

// NewLoadProperties creates a new instance of LoadProperties. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLoadProperties(t mockConstructorTestingTNewLoadProperties) *LoadProperties {
	mock := &LoadProperties{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
